-- MySQL Script generated by MySQL Workbench
-- Wed Nov  6 11:14:25 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema Youtube
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema Youtube
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Youtube` DEFAULT CHARACTER SET utf8 ;
-- -----------------------------------------------------
-- Schema new_schema1
-- -----------------------------------------------------
USE `Youtube` ;

-- -----------------------------------------------------
-- Table `Youtube`.`Username`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Youtube`.`Username` (
  `idUser` INT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(45) NULL,
  `password` VARCHAR(45) NULL,
  `Name` VARCHAR(45) NULL,
  `dateOfBirth` DATE NULL,
  `sex` VARCHAR(45) NULL,
  `country` VARCHAR(45) NULL,
  `postalCode` VARCHAR(45) NULL,
  PRIMARY KEY (`idUser`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Youtube`.`Videos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Youtube`.`Videos` (
  `idVideo` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(45) NULL,
  `description` VARCHAR(300) NULL,
  `size` DOUBLE NULL,
  `nameVideoFile` VARCHAR(45) NULL,
  `length` DOUBLE NULL,
  `thumbnale` VARCHAR(45) NULL,
  `numberReproductions` INT NULL,
  `numberLikes` INT NULL,
  `numberDislikes` INT NULL,
  `state` ENUM('public', 'hidden', 'private') NULL,
  `idUser` INT NULL,
  `date/time_published` VARCHAR(45) NULL,
  PRIMARY KEY (`idVideo`),
  INDEX `idUser_idx` (`idUser` ASC) VISIBLE,
  CONSTRAINT `idUser`
    FOREIGN KEY (`idUser`)
    REFERENCES `Youtube`.`Username` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Youtube`.`Channel`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Youtube`.`Channel` (
  `idChannel` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NULL,
  `description` VARCHAR(300) NULL,
  `dateCreation` DATE NULL,
  `idUser` INT NULL,
  PRIMARY KEY (`idChannel`),
  INDEX `idUser_idx` (`idUser` ASC) VISIBLE,
  CONSTRAINT `idUser`
    FOREIGN KEY (`idUser`)
    REFERENCES `Youtube`.`Username` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Youtube`.`Subscription`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Youtube`.`Subscription` (
  `idUser` INT NOT NULL,
  `idChannel` INT NOT NULL,
  `dateSubscription` DATE NULL,
  INDEX `idUser_idx` (`idUser` ASC) VISIBLE,
  INDEX `idChannel_idx` (`idChannel` ASC) VISIBLE,
  CONSTRAINT `idUser`
    FOREIGN KEY (`idUser`)
    REFERENCES `Youtube`.`Username` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idChannel`
    FOREIGN KEY (`idChannel`)
    REFERENCES `Youtube`.`Channel` (`idChannel`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Youtube`.`LikeDislikeVideo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Youtube`.`LikeDislikeVideo` (
  `idUser` INT NOT NULL,
  `idVideo` INT NULL,
  `type` ENUM('like', 'dislike') NULL,
  `LikeDislikeVideocol` VARCHAR(45) NULL,
  `date/time` VARCHAR(45) NULL,
  INDEX `idUser_idx` (`idUser` ASC) VISIBLE,
  INDEX `idVideo_idx` (`idVideo` ASC) VISIBLE,
  CONSTRAINT `idUser`
    FOREIGN KEY (`idUser`)
    REFERENCES `Youtube`.`Username` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idVideo`
    FOREIGN KEY (`idVideo`)
    REFERENCES `Youtube`.`Videos` (`idVideo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Youtube`.`Playlist`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Youtube`.`Playlist` (
  `idPlaylist` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NULL,
  `dateCreation` DATE NULL,
  `state` ENUM('public', 'private') NULL,
  `Playlistcol` VARCHAR(45) NULL,
  `idUser` INT NULL,
  PRIMARY KEY (`idPlaylist`),
  INDEX `idUser_idx` (`idUser` ASC) VISIBLE,
  CONSTRAINT `idUser`
    FOREIGN KEY (`idUser`)
    REFERENCES `Youtube`.`Username` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Youtube`.`Playlist_Video`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Youtube`.`Playlist_Video` (
  `idPlaylist` INT NOT NULL,
  `idVideo` INT NOT NULL,
  INDEX `idPlaylist_idx` (`idPlaylist` ASC) VISIBLE,
  INDEX `idVideo_idx` (`idVideo` ASC) VISIBLE,
  PRIMARY KEY (`idPlaylist`, `idVideo`),
  CONSTRAINT `idPlaylist`
    FOREIGN KEY (`idPlaylist`)
    REFERENCES `Youtube`.`Playlist` (`idPlaylist`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idVideo`
    FOREIGN KEY (`idVideo`)
    REFERENCES `Youtube`.`Videos` (`idVideo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Youtube`.`Comment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Youtube`.`Comment` (
  `idComment` INT NOT NULL,
  `text` VARCHAR(500) NULL,
  `date/time` VARCHAR(100) NULL,
  `idUser` INT NULL,
  `idVideo` INT NULL,
  PRIMARY KEY (`idComment`),
  INDEX `idUser_idx` (`idUser` ASC) VISIBLE,
  INDEX `idVideo_idx` (`idVideo` ASC) VISIBLE,
  CONSTRAINT `idUser`
    FOREIGN KEY (`idUser`)
    REFERENCES `Youtube`.`Username` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idVideo`
    FOREIGN KEY (`idVideo`)
    REFERENCES `Youtube`.`Videos` (`idVideo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Youtube`.`LikeDislikeComment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Youtube`.`LikeDislikeComment` (
  `idUser` INT NULL,
  `idComment` INT NULL,
  `type` ENUM('like', 'dislike') NULL,
  `date/time` VARCHAR(45) NULL,
  INDEX `idUser_idx` (`idUser` ASC) VISIBLE,
  INDEX `idComment_idx` (`idComment` ASC) VISIBLE,
  CONSTRAINT `idUser`
    FOREIGN KEY (`idUser`)
    REFERENCES `Youtube`.`Username` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idComment`
    FOREIGN KEY (`idComment`)
    REFERENCES `Youtube`.`Comment` (`idComment`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Youtube`.`tag`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Youtube`.`tag` (
  `idTag` INT NOT NULL AUTO_INCREMENT,
  `name_Tag` VARCHAR(45) NULL,
  PRIMARY KEY (`idTag`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Youtube`.`tag_videos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Youtube`.`tag_videos` (
  `idtag_videos` INT NOT NULL,
  `idTag` INT NULL,
  `idVideo` INT NULL,
  INDEX `idTag_idx` (`idTag` ASC) VISIBLE,
  INDEX `idVideo_idx` (`idVideo` ASC) VISIBLE,
  CONSTRAINT `idTag`
    FOREIGN KEY (`idTag`)
    REFERENCES `Youtube`.`tag` (`idTag`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idVideo`
    FOREIGN KEY (`idVideo`)
    REFERENCES `Youtube`.`Videos` (`idVideo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
